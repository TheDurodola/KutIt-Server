package com.kutit.yrsd.services;

import com.kutit.yrsd.data.repositories.Entries;
import com.kutit.yrsd.dtos.requests.CreateEntryRequest;
import com.kutit.yrsd.dtos.requests.GetEntryRequest;
import com.kutit.yrsd.dtos.responses.CreateEntryResponse;
import com.kutit.yrsd.dtos.responses.GetEntryResponse;
import com.kutit.yrsd.exceptions.InvalidLinkFormatException;
import com.kutit.yrsd.exceptions.InvalidShortenLinkException;
import com.kutit.yrsd.utils.ShortLinkGenerator;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
class EntryServicesImplTest {

    @Autowired
    Entries entries;

    @Autowired
    EntryServicesImpl services;

    @BeforeEach
    void setUp() {
        entries.deleteAll();
    }

    @Test
    void whenEntryIsCreatedShortenedLinkIsAutoGenerated(){
        CreateEntryRequest request = new CreateEntryRequest();
        request.setOriginalLink("https://mvnrepository.com/artifact/org.springframework.security/spring-security-crypto/6.5.1");
        CreateEntryResponse response = services.createdEntry(request);
        assertNotNull(response.getShortenedLink());
        assertEquals(7, response.getShortenedLink().length());
    }

    @Test
    void ifUnregisteredUserAttemptsToCreateNewEntryOfAnAlreadyExistingLinkAlreadyGeneratedEntryWillBeReturned(){
        CreateEntryRequest request = new CreateEntryRequest();
        request.setOriginalLink("https://mvnrepository.com/artifact/org.springframework.security/spring-security-crypto/6.5.1");
        services.createdEntry(request);

        request.setOriginalLink("https://mvnrepository.com/artifact/org.springframework.security/spring-security-crypto/6.5.1");
        services.createdEntry(request);

        assertEquals(1, entries.count());
    }


//    @Test
//    void EntryWithoutUsersSelfDeleteAfterSevenDays(){
//        CreateEntryRequest request = new CreateEntryRequest();
//        request.setOriginalLink("https://mvnrepository.com/artifact/org.springframework.security/spring-security-crypto/6.5.1");
//        CreateEntryResponse response = services.createdEntry(request);
//        Entry entry = entries.findByOriginalLink("https://mvnrepository.com/artifact/org.springframework.security/spring-security-crypto/6.5.1").get();
//        assertNotNull(entry);
//        entry.setUpdatedAt(LocalDateTime.of(2025, 10, 1, 12, 0));
//        entries.save(entry);
//        assertEquals(0, entries.count());
//    }


    @Test
    void InvalidLinkWouldThrowAnInvalidLinkFormatException(){
        CreateEntryRequest request = new CreateEntryRequest();


        request.setOriginalLink("Bolaji");
        assertThrows(InvalidLinkFormatException.class, ()-> services.createdEntry(request));

        request.setOriginalLink("08148260470");
        assertThrows(InvalidLinkFormatException.class, ()-> services.createdEntry(request));

        request.setOriginalLink("https;");
        assertThrows(InvalidLinkFormatException.class, ()-> services.createdEntry(request));

        request.setOriginalLink("ftp://wrong.com");
        assertThrows(InvalidLinkFormatException.class, ()-> services.createdEntry(request));

        request.setOriginalLink("m.facebook.com");
        assertDoesNotThrow(()-> services.createdEntry(request));

        request.setOriginalLink("facebook.com");
        assertDoesNotThrow(()-> services.createdEntry(request));

        request.setOriginalLink("http:/broken.com");
        assertThrows(InvalidLinkFormatException.class, ()-> services.createdEntry(request));

        request.setOriginalLink("https://chatgpt/c/68eb47f0-1d94-8326-8a75-117b0e37fe88");
        assertThrows(InvalidLinkFormatException.class, ()-> services.createdEntry(request));

        request.setOriginalLink("https://chatgpt.com/c/68eb47f0-1d94-8326-8a75-117b0e37fe88");
        assertDoesNotThrow(()-> services.createdEntry(request));

    }

    @Test
    void RetrieveOriginalLinkUsingTheShortenedLink(){
        CreateEntryRequest request = new CreateEntryRequest();
        request.setOriginalLink("https://mvnrepository.com/artifact/org.springframework.security/spring-security-crypto/6.5.1");
        CreateEntryResponse response = services.createdEntry(request);
        GetEntryRequest getEntryRequest = new GetEntryRequest();
        getEntryRequest.setShortendLink(response.getShortenedLink());
        GetEntryResponse getEntryResponse = services.getEntry(getEntryRequest);
        assertEquals(request.getOriginalLink(), getEntryResponse.getOriginalLink());
    }

    @Test
    void attemptToRetrieveOriginalLinkUsingTheShortenedLinkThatDoesNotExist(){
        GetEntryRequest getEntryRequest = new GetEntryRequest();
        getEntryRequest.setShortendLink("e3hTs5Y");
        assertThrows(InvalidShortenLinkException.class, ()-> services.getEntry(getEntryRequest));
    }

    @Test
    void testThatRandomStringGeneratorWorks(){
        assertNotEquals(ShortLinkGenerator.generateShortCode(), ShortLinkGenerator.generateShortCode());
    }


    @Test
    void testThatWhenShortenLinkIsUsedClickCountIncreases(){
        CreateEntryRequest request = new CreateEntryRequest();
        request.setOriginalLink("https://mvnrepository.com/artifact/org.springframework.security/spring-security-crypto/6.5.1");
        CreateEntryResponse response = services.createdEntry(request);
        GetEntryRequest getEntryRequest = new GetEntryRequest();
        getEntryRequest.setShortendLink(response.getShortenedLink());
        GetEntryResponse getEntryResponse = services.getEntry(getEntryRequest);
        assertEquals(1L, getEntryResponse.getClicks());
        response = services.createdEntry(request);
        getEntryRequest = new GetEntryRequest();
        getEntryRequest.setShortendLink(response.getShortenedLink());
        getEntryResponse = services.getEntry(getEntryRequest);
        assertEquals(2L, getEntryResponse.getClicks());
    }
}